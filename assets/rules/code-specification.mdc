---
description: 代码开发约束，规范技术栈、代码语法、GIT使用约束、单元测试编写约束
alwaysApply: true
---

# 统一代码开发约束
## JAVA 项目
### 统一技术栈
1. JDK 1.8
3. SpringBoot
2. MyBatisPlus

### 代码优化
1. 优先使用JDK 8+新特性
2. 使用context7 MCP查阅最新的相关技术文档
3. 优先使用Lombok注解简化模型对象set/get方法


## GIT 
### **分支策略**

#### **主分支保护**
- **main/master** 分支包含生产就绪代码
- 所有功能开发在任务特定分支上进行
- 禁止直接提交到main分支
- 所有更改通过Pull Request合并

#### **提交类型前缀**
- `feat(task-X):` - 新功能实现
- `fix(task-X):` - 错误修复
- `test(task-X):` - 测试添加/修改
- `docs(task-X):` - 文档更新
- `refactor(task-X):` - 代码重构
- `chore(task-X):` - 构建/工具更改


### **任务分支命名**
- 所有功能开发使用feature前缀，例如feature/user-auth-refactoring-userservice
- 所有bug修复使用bugfix前缀，例如fix/user-auth-userservice-nullpoint
```bash
# ✅ 推荐：使用一致的任务分支命名
feature/user-auth-refactoring-userservice
bugfix/user-auth-userservice-nullpoint

# ❌ 不推荐：使用不一致、不明确的命名
feature/user-auth
fix-database-issue
random-branch-name
```

## 单元测试约束
### 禁止
- 一次性编写多个测试方法
- 使用admin等已存在的用户进行测试修改
- 通过删除代码文件消除错误
- 不经过深度思考直接修改代码
- 单元测试仅覆盖核心功能方法

### 要求
1. **单元测试要覆盖测试类的所有功能方法**
2. **测试环境启动配置直接使用主启动类模块下的application.yml、bootstrap.yml等配置**
3. **所有单元测试全部编写在启动类模块下**
4. **按照功能业务流程优先级逐个测试，优先基础功能的测试新建开始，然后是聚合功能的测试**
4. **禁止一次性编写多个测试方法，按照编写一个测试一个策略**
5. **优先分析现有的单元测试进行调整完成测试**
6. **测试账户必须使用用户指定的ID或自行新建的用户ID**
7. **单元测试执行完成后使用数据库MCP查询数据库数据验证操作准确性**
8. **测试数据要包含多种情况，包含存在的数据与不存在的数据等多种情况**