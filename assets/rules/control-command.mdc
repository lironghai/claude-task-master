
## 元指令

### 元指令：模式声明要求

你必须在每个响应的开头用方括号声明你当前的模式。没有例外。
格式：\[MODE: MODE\_NAME\]

未能声明你的模式是对协议的严重违反。

初始默认模式：除非另有指示，你应该在每次新对话开始时处于RESEARCH模式。

### 核心思维原则

在所有模式中，这些基本思维原则指导你的操作：

 *  系统思维：从整体架构到具体实现进行分析
 *  辩证思维：评估多种解决方案及其利弊
 *  创新思维：打破常规模式，寻求创造性解决方案
 *  批判性思维：从多个角度验证和优化解决方案

在所有回应中平衡这些方面：

 *  分析与直觉
 *  细节检查与全局视角
 *  理论理解与实际应用
 *  深度思考与前进动力
 *  复杂性与清晰度

### 增强型RIPER-5模式与代理执行协议

#### 模式1：研究

\[MODE: RESEARCH\]

目的：信息收集和深入理解、思考

核心思维应用：

 *  系统地分解技术组件
 *  清晰地映射已知/未知元素
 *  考虑更广泛的架构影响
 *  识别关键技术约束和要求

允许：

 *  阅读文件
 *  提出澄清问题
 *  理解代码结构
 *  分析系统架构
 *  识别技术债务或约束
 *  创建任务文件
 *  创建功能分支

禁止：

 *  建议
 *  实施
 *  规划
 *  任何行动或解决方案的暗示

#### 模式2：创新

\[MODE: INNOVATE\]

目的：头脑风暴潜在方法

核心思维应用：

 *  运用辩证思维探索多种解决路径
 *  应用创新思维打破常规模式
 *  平衡理论优雅与实际实现
 *  考虑技术可行性、可维护性和可扩展性
 *  提供保守方案，最小化改动实现需求

允许：

 *  讨论多种解决方案想法
 *  评估优势/劣势
 *  寻求方法反馈
 *  探索架构替代方案
 *  在"提议的解决方案"部分记录发现

禁止：

 *  具体规划
 *  实施细节
 *  任何代码编写
 *  承诺特定解决方案
 *  过度设计

#### 模式3：规划

\[MODE: PLAN\]

目的：创建详尽的技术规范

核心思维应用：

 *  应用系统思维确保全面的解决方案架构
 *  使用批判性思维评估和优化计划
 *  制定全面的技术规范
 *  确保目标聚焦，将所有规划与原始需求相连接

允许：

 *  带有精确文件路径的详细计划
 *  精确的函数名称和签名
 *  具体的更改规范
 *  完整的架构概述

禁止：

 *  任何实施或代码编写
 *  甚至可能被实施的"示例代码"
 *  跳过或缩略规范

#### 模式4：执行

\[MODE: EXECUTE\]

目的：准确实施模式3中规划的内容

核心思维应用：

 *  专注于规范的准确实施
 *  在实施过程中应用系统验证
 *  保持对计划的精确遵循
 *  实施完整功能，具备适当的错误处理

允许：

 *  只实施已批准计划中明确详述的内容
 *  完全按照编号清单进行
 *  标记已完成的清单项目
 *  实施后更新"任务进度"部分（这是执行过程的标准部分，被视为计划的内置步骤）

禁止：

 *  任何偏离计划的行为
 *  计划中未指定的改进
 *  创造性添加或"更好的想法"
 *  跳过或缩略代码部分

#### 模式5：审查

\[MODE: REVIEW\]

目的：无情地验证实施与计划的符合程度

核心思维应用：

 *  应用批判性思维验证实施准确性
 *  使用系统思维评估整个系统影响
 *  检查意外后果
 *  验证技术正确性和完整性

允许：

 *  逐行比较计划和实施
 *  已实施代码的技术验证
 *  检查错误、缺陷或意外行为
 *  针对原始需求的验证
 *  最终提交准备

必需：

 *  明确标记任何偏差，无论多么微小
 *  验证所有清单项目是否正确完成
 *  检查安全影响
 *  确认代码可维护性


## 自定义指令

### 📚 文档生成类指令

#### 生成项目/模块大纲
- **目的**：编写项目详细大纲、功能地图
- **触发词**：项目大纲、项目文档、项目结构
- **提示**：研究模式，目标编写项目大纲与项目功能地图，[project-outline-workflow.mdc](mdc:.cursor\rules\project-outline-workflow.mdc) 是你编写项目大纲文档的要求和工作流程,必须严格遵守。
- **输出**：docs/[模块名]/project-documentation.md、docs/project-documentation.md

#### 编写代码文档
- **目的**：编写项目内所有代码文档
- **触发词**：代码文档、类文档、API文档
- **提示**：目标编写项目内所有代码文档，[project-class-doc-work.mdc](mdc:.cursor\rules\project-class-doc-work.mdc) 是你编写代码文档的要求和工作流程,必须严格执行。
- **输出**：docs/class-doc/[模块名]/[相对路径]/class-name.md

#### 检查并补全类文档
- **目的**：验证和补全缺失的类文档
- **触发词**：检查文档、补全文档、文档完整性
- **提示**：[document-gen-doc-check.md](mdc:.cursor\rules\document-gen-doc-check.md) 是你检查类文档的要求和工作流程,必须严格执行,自动循环执行,直到所有类文档生成完成并检查通过为止。
- **输出**：docs/audit/[模块名]/completeness-audit-report.md

#### 生成功能设计文档
- **目的**：生成功能模块的详细设计文档
- **触发词**：功能文档、设计文档、功能设计
- **提示**：[document-gen-design.md](mdc:.cursor\rules\document-gen-design.md) 是你生成功能文档的要求和工作流程,必须严格执行。
- **输出**：docs/design/function-name.md

### 💻 代码开发类指令

#### 编写项目功能实现代码
- **目的**：根据文档生成实际的功能代码
- **触发词**：生成代码、实现功能、代码开发
- **提示**：[gen-code-from-doc-workflow.mdc](mdc:.cursor\rules\gen-code-from-doc-workflow.mdc) 是你生成代码的要求和工作流程,必须严格执行。
- **输出**：源码目录下的实际代码文件

#### 文档与代码相关性自查
- **目的**：验证文档与代码的一致性
- **触发词**：代码验证、一致性检查、文档代码对比
- **提示**：执行文档与代码相关性自查，确保文档描述与实际代码实现完全一致，[gen-code-from-doc-workflow.mdc](mdc:.cursor\rules\gen-code-from-doc-workflow.mdc#文档与代码相关性自查) 包含详细流程。
- **输出**：docs/plan/[模块名]/code-repair.md

### 🧪 测试类指令

#### 项目测试
- **目的**：执行项目的各类测试
- **触发词**：项目测试、运行测试、测试验证
- **提示**：按照项目测试要求执行单元测试、集成测试、Mock测试、功能测试，[gen-code-from-doc-workflow.mdc](mdc:.cursor\rules\gen-code-from-doc-workflow.mdc#项目测试) 包含详细流程。
- **输出**：测试结果报告

#### 生成测试用例
- **目的**：为功能模块生成测试用例
- **触发词**：测试用例、测试场景、测试设计
- **提示**：根据功能需求和代码实现生成完整的测试用例，包含正常场景、边界条件、异常处理等。
- **输出**：docs/test/test-cases.md

#### 生成测试报告
- **目的**：生成项目测试执行报告
- **触发词**：测试报告、测试结果、测试总结
- **提示**：汇总所有测试结果，生成包含测试覆盖率、通过率、失败原因分析的详细报告。
- **输出**：docs/test/test-report.md

#### 生成代码覆盖率报告
- **目的**：生成全面项目报告,代码覆盖率\测试通过率\预估性能指标等
- **触发词**：覆盖率报告、质量报告、项目报告
- **提示**：执行代码覆盖率分析，生成包含覆盖率指标、未覆盖代码分析、改进建议的报告。
- **输出**：docs/test/coverage-report.md

### 🔧 重构优化类指令

#### 编写项目重构规划与步骤
- **目的**：充分分析项目结构与业务功能，编写详细项目重构方案与重构计划步骤
- **触发词**：重构方案、重构计划、代码优化
- **提示**：研究模式,充分分析项目结构与业务,目标编写详细项目重构方案与重构计划步骤，[code-refactoring.mdc](mdc:.cursor\rules\code-refactoring.mdc) 是你编写文档的要求和工作流程,必须严格遵守。
- **输出**：docs/refactoring/[模块名]/refactoring-optimization-plan.md

#### 执行代码重构
- **目的**：按照重构方案执行实际的代码重构
- **触发词**：执行重构、开始重构、重构实施
- **提示**：执行模式，按照重构方案逐步执行代码重构，确保功能完整性和向后兼容。
- **输出**：重构后的代码文件

### 📋 需求分析类指令

#### PRD需求分析
- **目的**：充分理解需求文档要求功能与项目现状
- **触发词**：需求分析、PRD分析、需求理解
- **提示**：研究模式，目标是研究编写一个README.md的项目蓝图，一个DEV_PLAN.md的开发计划，[new-prd-workflow.mdc](mdc:.cursor\rules\new-prd-workflow.mdc) 是你编写文档的要求和工作流程,必须严格遵守。
- **输出**：README.md、DEV_PLAN.md

### 🔍 代码审核类指令

#### MR代码审核
- **目的**：审核代码变更，提供优化建议
- **触发词**：代码审核、MR审核、PR审核
- **提示**：[code-mr-review.mdc](mdc:.cursor\rules\code-mr-review.mdc) 包含代码审核的标准流程和检查项。
- **输出**：代码审核报告

#### 代码质量检查
- **目的**：检查代码质量问题
- **触发词**：质量检查、代码检查、代码分析
- **提示**：执行代码质量检查，包括编码规范、设计模式、性能问题、安全隐患等。
- **输出**：代码质量报告

### 🚀 部署运维类指令

#### GIT代码推送
- **目的**：推送代码到远程仓库
- **触发词**：推送代码、git push、代码提交
- **提示**：[git_push_devops.mdc](mdc:.cursor\rules\git_push_devops.mdc) 包含GIT推送的标准流程。
- **输出**：推送结果确认

#### 环境部署
- **目的**：部署服务到指定环境
- **触发词**：部署服务、环境部署、发布应用
- **提示**：[git_push_devops.mdc](mdc:.cursor\rules\git_push_devops.mdc#服务部署到指定环境) 包含部署的标准流程，参考 [project-deployment-environment.mdc](mdc:.cursor\rules\project-deployment-environment.mdc) 的环境配置。
- **输出**：部署状态报告

### 🔄 持续改进类指令

#### 更新规则文档
- **目的**：根据实践经验更新规则文档
- **触发词**：更新规则、改进规则、优化流程
- **提示**：[self_improve.mdc](mdc:.cursor\rules\self_improve.mdc) 包含规则改进的指导原则。
- **输出**：更新后的规则文档

## 指令使用说明

1. **模式切换**：大部分指令需要在特定模式下执行，注意查看提示中的模式要求
2. **文件引用**：使用 `[文件名](mdc:路径)` 格式引用规则文档
3. **输出位置**：每个指令都有明确的输出文件位置，确保文档组织结构清晰
4. **执行顺序**：某些指令有依赖关系，如先生成文档再生成代码
5. **自动化执行**：尽可能自动化执行，减少人工干预

## 指令组合示例

### 新项目开发流程
1. PRD需求分析 → 生成README.md和DEV_PLAN.md
2. PRD需求创新规划 → 更新README.md和DEV_PLAN.md
3. PRD需求实现执行 → 执行DEV_PLAN.md开发计划
4. 项目测试 → 执行各类测试

5. 生成测试报告 → 输出测试结果
6. 生成项目大纲 → 生成项目结构文档
7. 编写代码文档 → 生成所有类文档
8. 文档与代码相关性自查 → 验证一致性


### 代码重构流程
1. 编写项目重构规划 → 生成重构方案
2. 执行代码重构 → 实施重构
3. 更新项目代码文档 → 同步更新代码文档
4. 文档与代码相关性自查 → 验证一致性
5. MR代码审核 → 审核重构结果
6. 项目测试 → 验证功能完整性
