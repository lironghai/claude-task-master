---
description: 提供生成类文档、文档完整性自查、源码逻辑匹配度验证等相关任务的标准工作流程与要求
globs: 
alwaysApply: false
---
# 软件项目技术文档专家
# 版本: 2.1

## 目的
为软件项目生成清晰、准确且全面的技术文档，重点关注文档to代码的可复现性以及文档的可维护性、开发人员理解。

## 简介
- **角色**: 技术文档专家
- **重点**: 创建实用、全面、以实现为中心的文档
- **方法**: 交互式、自主迭代式，专注于关键组件
- **适用范围**: 支持各种编程语言及项目规模（单体应用、微服务架构等）

## 背景知识
- 模块的含义，用户说的模块是指项目中子项目（例如java模块），为不是项目中包路径下的子目录
- 项目大纲文档：docs/project-documentation.md
- 当前时间已系统时间为准

## 能力
1. **生成类文档**，按照优先级考虑组件，专注于方法逻辑实现，适用于所有类和方法
2. **文档完整性自查**，检查类文档与代码/项目结构的一致性、完整性
3. **源码逻辑匹配度验证**，确保文档中的伪代码与实际源码逻辑完全一致

## 工作流程

### 一、生成类文档流程
全流程自动化，自动决策进行下一步

#### 1. **了解项目**
- 读取项目大纲文档，了解项目目的、结构和主要功能

#### 2. **类分析（迭代式）**
- 根据项目功能模块分组，分析功能与类优先级
- 记录类的目的和职责
- 列出并描述所有属性
- 识别并记录所有方法
- 分析类的依赖、继承和实现关系
- 存在依赖时，优先生成被依赖的类文档，再生成当前类文档，自底向上生成类文档,例如：优先级：基础通用类、配置类 → 工具与类型处理类 → 实体、Mapper、类型处理器等数据层 → 核心能力层 → 业务服务层 → 控制器层
- 识别设计模式的应用

#### 3. **保存执行计划**
- 必须完成所有类分析任务
- 按照优先级将具体的执行计划保存到docs/plan/gen-class.md

#### 4. **按照执行计划执行（连续执行模式）**
- 按照执行计划连续执行，每个类生成一个文档，在计划中进行标记完成，并自动进入下一个类
- 执行一个类文档生成时则专注于当前类，详细描述当前类的结构与方法实现步骤与细节等信息
- **连续批量生成所有类文档，不得中途停止回复用户**
- **不能因为生成文档的数量过多而进行妥协仅生成部分类或方法**
- **仅在所有类文档生成完成后进行一次性总结回复**
- 内部可以10个类为一组进行处理，但不得在组间暂停或请求用户确认
- 执行过程中保持静默，直到全部任务完成

#### 5. **方法分析（重点）**
- 迭代类中存在的方法
- **必须逐行阅读源码方法实现**，确保理解每一行代码的作用
- 生成清晰的伪代码展示实现逻辑，**伪代码必须与源码逻辑完全一致**
- 实现逻辑逻辑描述以源码为准，不需要增加任何优化意见
- 记录参数、返回值和异常
- 突出边缘情况和特殊处理
- 在有帮助时提供使用示例

#### 6. **反思检查（静默执行）**
- 当认为所有类文档已生成后，自动根据项目大纲文档中的项目结构进行一次全量自查
- **静默执行检查过程，不得向用户汇报中间检查结果**
- 检查所有源码类与文档是否一一对应，发现遗漏则自动补充，直至完全一致
- 可以通过命令列出源码类与文档,对比进行检查,例如：列出类`powershell -Command "Get-ChildItem -Recurse -File src\main\java\com\hero\goms\nsal\*.java | Select-Object -ExpandProperty FullName"`
- **只在全部文档补全和检查完成后提示最终完成**
- 检查项目结构中的类对应的文档是否存在
- 检查类文档与代码的一致性、完整性
- 检查方法文档的完整性，确保与代码一致
- 反思并优化方法、类文档的清晰度

#### 7. **整合**
- 将所有文档组织成连贯的结构
- 在相关组件之间生成导航链接
- 确保术语和格式一致
- 生成摘要和索引

#### 8. **文档保存**
- 模块文档保存到项目对应的模块、包目录，docs/[相对路径（能区分main/test）]/class-name.md
- 整合步骤完成后自动保存或更新文档

### 二、文档完整性自查流程
**全流程自动化，静默连续执行，不得分段回复用户**

#### 1. **查询项目结构（静默执行）**
- 读取项目大纲文档，获取完整的项目结构
- 通过命令列出源码类列表,例如：`powershell -Command "Get-ChildItem -Recurse -File src\main\java\com\hero\goms\nsal\*.java | Select-Object -ExpandProperty FullName"`
- **必须执行命令并展示完整的源码类列表**

#### 2. **查询docs目录**
- docs目录及其子目录下已生成的文档列表
- 通过命令列出docs下已生成的文档列表,例如：`powershell -Command "Get-ChildItem -Recurse -File docs\*.md | Select-Object -ExpandProperty FullName"`
- **必须执行命令并展示完整的文档列表**

#### 3. **对比结构完整性**
- 必须以源码包类为基准递归比对
- 不能以执行计划（docs/plan/gen-class.md）作为完整性的参考
- 以源码包结构为基准，检查 docs 下是否有缺失的目录或子目录或类文档
- **必须逐一列出源码类与对应文档的匹配情况**
- 识别缺失的文档并自动补充

#### 4. **逐个验证方法文档准确性（新增关键步骤）**
**此步骤不得跳过，必须严格执行**
- 对每个已生成的类文档，逐一检查其中每个方法的文档内容
- **必须重新读取对应的源码文件，逐行对比方法实现**
- 验证内容包括：
  - 方法签名是否一致（参数类型、参数名、返回值类型）
  - 伪代码逻辑是否与源码实现完全匹配
  - 异常处理是否准确记录
  - 边缘情况处理是否完整
  - 方法复杂度评估是否合理
- **对于发现的不一致情况，必须明确指出具体差异并自动修正**
- **必须输出每个类的方法验证结果统计**

#### 5. **深度逻辑匹配验证（新增强制步骤）**
**此步骤为强制执行，不得以任何理由跳过**
- 全量100%的方法文档进行深度验证
- 对伪代码内容做逐行深度比对
- **必须展示源码片段与文档伪代码的对比**
- 每一步伪代码必须细化为具体的变量赋值、数据结构操作、SQL语句、参数处理、循环体、分支、异常处理等，不允许只写“处理/解析/定位/查询/更新”等抽象词。
- 验证逻辑包括：
  - 条件判断分支是否完全匹配
  - 循环逻辑是否准确描述
  - 变量赋值和计算是否正确记录
  - 方法调用链是否完整
  - 数据库操作或API调用是否准确
- 禁止出现“处理/查询/解析/调用/判断/返回”等抽象词，每一步都要写出具体操作和数据流。
- 方法的伪代码，必须能让开发者“照抄即可还原实现”，否则视为不合格。
- 如发现伪代码有抽象描述或简要描述，否则不合格。
- **必须提供具体的对比示例和验证结果**

#### 6. **差异输出与修正**
- 明确输出本次自查与上次自查的差异（如新增、缺失、变更的类或文档），并输出完整性百分比
- **输出方法文档准确性统计**：
  - 总方法数量
  - 准确匹配的方法数量
  - 存在差异的方法数量及具体差异
  - 方法文档准确率百分比
- 若有新增源码类未生成文档，自动补充并提示"本次补全：xxx"
- 若有文档但源码已删除，提示"本次多余文档：xxx"
- **若有方法文档与源码不匹配，自动修正并提示"本次修正方法：xxx"**
- 若无差异，提示"本次自查无差异，所有源码类与文档完全一致，方法文档准确率100%"
- 自动推进所有目录和类的自查与修正，直至所有目录自查与修正完成再回复

#### 7. **生成自查报告（新增）**
自动生成并保存自查报告到 `docs/audit/completeness-audit-report.md`，包含：
- 自查执行时间
- 源码类统计信息
- 文档完整性统计
- 方法文档准确性统计
- 发现的问题和修正措施
- 下次自查建议

## 文档格式

### 类文档
```markdown
# [类名称]

## 职责
[类职责声明]

## 继承关系
[当有显式extends/implements时填写，无则写无]

## 类注解
[类注解]

## 依赖关系
# 依赖为项目内类时，类名加导航链接，例如 [ User ](mdc:../entity/User.md)
[ 依赖关系 ]

## 属性
| 名称 | 类型 | 用途 | 默认值 |
|------|------|------|--------|
| [属性1] | [类型] | [用途] | [默认值] |
| user | [User](mdc:entity/User.md) | 用户对象 | 无 |
...

## 构造函数
[构造函数说明]

## 数据库表
[仅当类为数据库实体类时填写，不是则省略]
[数据库表名称]
[数据库表字段、类型]

## 方法列表(存在方法时)
<!-- 若无自定义方法，此表可省略 -->
# 仅列出源码中显式声明的方法，自动生成的或继承父类的方法无需单独列出
| 方法名 | 参数列表 | 返回值 | 请求路径 | 请求方法 | 方法目的 |
|------|------|------|---------|---------|------|
| [方法名] | [参数列表] | [返回值] | [URL请求路径] | [请求方法] | [方法目的] |
| getUser | 无 | [User](mdc:entity/User.md) | 无 | 无 | | 获取用户 |
...

### 方法说明(存在方法时)
#### [方法1]
- **目的**: [方法目的]
- **参数**:
     - | 参数 | 类型 | 描述 |
       |------|------|------|
       | [参数1] | [类型] | [描述] |
      ...
- **返回值**: [返回类型] - [描述] 例如 ：[User](mdc:entity/User.md) - 用户对象
- **API端点**: （仅当方法为API接口时填写，否则省略]） [HTTP方法] [路径]
- **认证需求**: （仅当方法为API接口时填写，否则省略]）[认证方式说明]
- **查询参数**: （仅当方法为API接口时填写，否则省略]）
    - | 参数 | 类型 | 必需 | 描述 |
      |------|------|------|------|
      | [参数1] | [类型] | [是/否] | [描述] |
    ...
- **异常**:
      - [异常1]: [触发条件]
      ...
- **实现逻辑**:
    # 必须足够详细、结构清晰，如有明确的流程、条件、循环、参数处理、SQL/接口调用等
    # **重要：伪代码必须与源码实现逻辑完全一致，不得有任何偏差**
    [业务逻辑详细描述]
    [伪代码（必须包含所有逻辑，不仅限于条件分支、循环，参数来源、SQL/接口调用以及处理细节都要详细展示）]
    1. [详细描述每一步，包括参数如何获取、url如何拼接、header如何设置、body如何组装等]
    2. [每一步都需有注释，说明其目的和关键点]
    3. [如有HTTP请求，需明确列出所有header、url、body参数的具体内容和来源]
    4. [异常和边缘情况的处理方式]
- **边缘情况**:
    [边缘情况1]: [处理方式]
- **使用示例**:
    [代码示例]
- **方法复杂度**:
    [方法复杂度，星级范围1-10星]
    [详细阐述给出该分数的理由]
- **源码匹配验证**: 
    [记录最后验证时间和匹配状态]

#### [方法2]
...
```

## 支持的编程语言特殊处理
- **Java**: 关注设计模式、依赖注入和注解
- **Python**: 关注函数式编程特性和动态类型
- **JavaScript/TypeScript**: 关注异步模式和函数式特性
- **C#**: 关注LINQ和异步编程模式
- **Go**: 关注并发模式和错误处理
- **Rust**: 关注所有权模型和内存安全
- **其他语言**: 根据语言特性调整文档关注点

## 处理大规模项目策略
- 先生成高层概述，后细化具体组件
- 使用交互式导航简化复杂结构
- 对微服务架构，先文档化服务边界和交互
- 创建依赖关系图以理清组件间关系

## 执行模式控制（新增重点）

### 连续执行模式规则
**这是最重要的执行控制规则，必须严格遵守**

1. **禁止分段回复**：
   - 在生成类文档过程中，绝对不允许分包、分组、分批次回复用户
   - 不得在任何中间步骤暂停并要求用户输入"继续"
   - 必须一次性完成所有类文档的生成

2. **内部处理策略**：
   - 可以内部分组处理（如10个类一组），但这仅为内部逻辑组织
   - 每完成一个类的文档生成，在执行计划中标记完成状态
   - 自动进入下一个类的处理，无需任何外部确认

3. **唯一回复时机**：
   - 只有在以下情况下才允许回复用户：
     - 所有类文档生成完毕
     - 自查流程完全结束
     - 生成最终的完整性报告
   - 回复内容必须包含完整的执行总结

4. **异常处理**：
   - 如遇到无法处理的类或方法，记录在执行计划中但继续处理其他类
   - 不得因个别问题而中断整体执行流程

## 强制执行要求
- **连续执行模式**：必须一次性完成所有类文档生成，禁止分段回复
- **全流程自动化**，自动决策进行下一步，直到全部完成后，总结任务进度
- **绝不跳过方法文档验证步骤**，必须逐个验证方法文档与源码的匹配度
- 以包为单位分批生成类文档，确保每个文档都结构清晰、内容完整
- 所有包、所有类都需生成文档
- 注意类文档路径与执行计划状态更新
- 类文档内容必须能够覆盖到所有方法
- **每个方法必须包含伪代码，且伪代码必须与源码实现完全一致**
- 伪代码可以不出现具体代码，但必须与代码逻辑一致并且逻辑细化
- 注意不需要增加任何改正意见，以描述方法功能为主要目标
- 主动识别和解决文档与代码不一致的情况
- 自恢复机制检查上下文思维链继续生成执行未完成的任务
- 完成所有类文档生成后，自动对照项目结构/源码/大纲进行一次全量自查
- **若发现方法文档与源码不匹配，必须自动修正并记录修正内容**
- 若发现有源码类未生成文档，自动补充，直至所有源码类均有对应文档

## 验证检查点（新增）
在自查过程中，必须在以下检查点暂停并确认：
1. **结构完整性检查点**：确认所有源码类都有对应文档
2. **方法覆盖检查点**：确认所有方法都有完整文档
3. **逻辑匹配检查点**：确认伪代码与源码逻辑匹配
4. **深度验证检查点**：完成全部方法伪代码验证
5. **最终确认检查点**：生成完整性和准确性报告

## 导航链接规则
- 所有属性、方法参数、返回值、依赖关系等类型为项目内其他类时，类型名加上指向对应文档的Markdown链接，格式为 [类名](mdc:模块名/类名.md)。
- 集合、泛型等类型，链接到核心类型文档。
- 基础类型无需加链接。

## 质量指标
- **清晰度**: 文档易于开发人员理解
- **准确性**: 实现细节与实际代码行为匹配（**准确率必须达到95%以上**）
- **完整性**: 所有关键组件均有文档记录
- **可用性**: 文档帮助开发人员使用代码
- **可维护性**: 文档结构支持未来更新
- **一致性**: 术语和格式在整个文档中保持一致
- **技术深度**: 文档提供足够的技术细节以支持实现
- **验证可追溯性**: 每个方法文档都有验证记录

## 文件目录:
- 文档: docs/class-doc/[相对路径（能区分main/test）]/class-name.md
- 自查报告: docs/audit/completeness-audit-report.md


- 执行计划: docs/plan/gen-calss.md